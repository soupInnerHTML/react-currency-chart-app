{"version":3,"sources":["utils/getTime.ts","hoc/withMemo.tsx","global/consts.js","utils/normalizeNum.ts","store/Streamer.ts","store/App.ts","store/History.ts","store/index.ts","hoc/withStore.tsx","utils/getColorByCurrency.ts","components/Chart/Params/CurrencyList.tsx","components/Chart/Params/CurrencyNameWithDot.tsx","components/Chart/Params/CurrentStreamValue.tsx","components/Chart/Params/CustomSwitch.tsx","components/Chart/Params/ChartParams.tsx","logo.svg","components/Loader.tsx","components/Chart/MainChart.tsx","components/AppBody.tsx","components/App.tsx","index.tsx"],"names":["_parseDozens","val","Component","date","Date","isWithSeconds","d","getHours","getMinutes","getSeconds","filter","_","i","map","join","PRICE","VOLUME","num","Number","toFixed","ECurrencyModel","types","enumeration","Object","keys","currencyColors","currency","model","name","streamValue","optional","number","Streamer","streamBy","string","subscribedCurrency","subscribedCurrencyBase","volatile","self","ccStreamer","WebSocket","channel","views","getRoot","history","this","historyOfPriceChange","historyOfSubsPriceChange","actions","afterCreate","onopen","subRequest","send","JSON","stringify","onmessage","onStreamMessage","onerror","e","console","log","message","data","parse","_streamBy","normalizeNum","toUpperCase","setGlobal","time","getTime","cName","FROMSYMBOL","cBase","TOSYMBOL","setSubs","streamByCurrencies","simpleCurrencyName","cryptoCurrencyName","switchHistory","heartBeat","streamBySimpleCurrency","streamByCryptoCurrency","setStreamBy","App","isReady","isDisconnect","isDisconnectHappened","ready","flag","disconnect","historyItem","History","array","api","axios","create","baseURL","timeout","headers","Authorization","Accept","streamer","getHistoryData","flow","Data","_historyItem","volumeto","slice","filterBy","gHistory","getSnapshot","updatesForNewCurrency","length","clear","push","Store","app","stores","store","withStore","inject","observer","curr","DEFAULT","cb","isActive","list","useMemo","c","className","cs","active","currencyName","onClick","withMemo","props","useState","setIsActive","CColor","getColorByCurrency","onMouseEnter","onMouseLeave","style","background","boxShadow","React","memo","prev","next","prevStreamValue","setPrevStreamValue","priceClass","setPriceClass","useEffect","onAnimationEnd","Loader","src","logo","alt","tick","fontSize","fromColor","toColor","isDataNull","AreaChart","width","window","innerWidth","height","id","x1","y1","x2","y2","offset","stopColor","stopOpacity","CartesianGrid","strokeDasharray","XAxis","dataKey","YAxis","domain","Tooltip","Area","type","stroke","fillOpacity","fill","AppBody","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b2f8f8bc.chunk.js","sourcesContent":["function _parseDozens(val: number) {\n    return val < 10 ? \"0\" + val : val\n}\n\nexport default function (date = new Date(), isWithSeconds = false) {\n    const d = new Date(date)\n    return [\n        d.getHours(),\n        d.getMinutes(),\n        d.getSeconds()\n    ]\n        .filter((_, i) => isWithSeconds ? i !== 2 : true)\n        .map(i => _parseDozens(i))\n        .join(\":\")\n}\n// example output 23:59:59 | 00:01:01\n","import React, { FC } from \"react\";\n// import { IStore } from \"../store\";\n\nexport default (Component: FC<any>) => (\n    React.memo(\n        Component,\n        (prev, next) => (\n            JSON.stringify(prev) === JSON.stringify(next)\n        )\n    )\n)\n","export const PRICE = \"price\"\nexport const VOLUME = \"lastVolumeTo\"\n","export default function (num: any) {\n    return Number(num?.toFixed(3))\n}\n","import { getRoot, types } from \"mobx-state-tree\"\nimport getTime from \"../utils/getTime\";\nimport currencyColors from \"../global/currencyColors.json\";\nimport { ECurrency } from \"../global/types\";\nimport { PRICE, VOLUME } from \"../global/consts\";\nimport normalizeNum from \"../utils/normalizeNum\";\n\nconst ECurrencyModel = types.enumeration(Object.keys(currencyColors))\n\nconst currency = types.model({\n    name: ECurrencyModel,\n    streamValue: types.optional(types.number, 0),\n})\n\nconst Streamer = types\n    .model(\"Streamer\", {\n        streamBy: types.optional(types.string, PRICE),\n        subscribedCurrency: types.optional(currency, { name: \"BTC\", }),\n        subscribedCurrencyBase: types.optional(currency, { name: \"USD\", }),\n    })\n    .volatile(self => ({\n        ccStreamer: new WebSocket(\"wss://streamer.cryptocompare.com/v2?api_key=\" + process.env.REACT_APP_CC_API_KEY),\n        channel: \"5~CCCAGG\",\n    }))\n    .views(self => ({\n        get history() {\n            // @ts-ignore\n            return getRoot(self).history\n        },\n        get historyOfPriceChange() {\n            return this.history.historyOfPriceChange\n        },\n        get historyOfSubsPriceChange() {\n            return this.history.historyOfSubsPriceChange\n        },\n    }))\n    .actions((self) => ({\n        afterCreate() {\n            self.ccStreamer.onopen = function onStreamOpen() {\n                let subRequest = {\n                    \"action\": \"SubAdd\",\n                    \"subs\": [`${self.channel}~${self.subscribedCurrency.name}~${self.subscribedCurrencyBase.name}`],\n                };\n                self.ccStreamer.send(JSON.stringify(subRequest));\n            }\n\n            self.ccStreamer.onmessage = this.onStreamMessage\n\n            self.ccStreamer.onerror = (e) => console.log(e)\n\n        },\n        onStreamMessage(message: {data: string}) {\n            const data = JSON.parse(message.data)\n            const _streamBy = normalizeNum(data[self.streamBy.toUpperCase()])\n            if (_streamBy) {\n                self.history.setGlobal({\n                    time: getTime(),\n                    cName: data.FROMSYMBOL,\n                    cBase: data.TOSYMBOL,\n                    streamValue: _streamBy,\n                    streamBy: self.streamBy as any,\n                })\n\n                if (\n                    data.TOSYMBOL === self.subscribedCurrencyBase.name &&\n                    data.FROMSYMBOL === self.subscribedCurrency.name\n                ) {\n                    self.subscribedCurrency.streamValue = _streamBy\n\n                    self.history.setSubs({\n                        time: getTime(),\n                        cName: data.FROMSYMBOL,\n                        cBase: data.TOSYMBOL,\n                        streamValue: _streamBy,\n                        streamBy: self.streamBy as any,\n                    })\n                }\n\n                // if (self.historyOfSubsPriceChange.length > 20) {\n                //     // self.historyOfSubsPriceChange.splice(0, 15)\n                //     self.history.cut()\n                // }\n                //\n                // if (self.historyOfPriceChange.length > 20) {\n                //     // self.historyOfPriceChange.splice(0, 15)\n                //     self.history.cut()\n                // }\n            }\n        },\n        streamByCurrencies(simpleCurrencyName: ECurrency, cryptoCurrencyName: ECurrency) {\n            self.history.switchHistory((heartBeat: any) => (\n                heartBeat.cBase === simpleCurrencyName &&\n                heartBeat.cName === cryptoCurrencyName &&\n                heartBeat.streamBy === self.streamBy\n            ))\n\n            self.subscribedCurrencyBase.name = simpleCurrencyName\n            self.subscribedCurrency.name = cryptoCurrencyName\n\n            let subRequest = {\n                \"action\": \"SubAdd\",\n                \"subs\": [`${self.channel}~${cryptoCurrencyName}~${simpleCurrencyName}`],\n            };\n            self.ccStreamer.send(JSON.stringify(subRequest));\n        },\n        streamBySimpleCurrency(simpleCurrencyName: ECurrency) {\n            this.streamByCurrencies(simpleCurrencyName, self.subscribedCurrency.name as ECurrency)\n        },\n        streamByCryptoCurrency(cryptoCurrencyName: ECurrency) {\n            this.streamByCurrencies(self.subscribedCurrencyBase.name as ECurrency, cryptoCurrencyName)\n        },\n        setStreamBy(_streamBy: typeof PRICE | typeof VOLUME) {\n            self.streamBy = _streamBy\n            self.history.switchHistory((heartBeat: any) => (\n                heartBeat.streamBy === _streamBy && heartBeat.streamValue\n            ))\n        },\n    }))\n\nexport default Streamer\n","import { Instance, types } from \"mobx-state-tree\"\n\n\nconst App = types\n    .model(\"App\", {\n        isReady: false,\n        isDisconnect: false,\n        isDisconnectHappened: false,\n    })\n    .actions(self => ({\n        ready: (flag = true) => {\n            self.isReady = flag\n        },\n        disconnect: (flag = true) => {\n            self.isDisconnect = flag\n            self.isDisconnectHappened = true\n        },\n    }))\n\n\nexport interface IApp extends Instance<typeof App> {}\nexport default App\n","import { flow, getRoot, getSnapshot, Instance, types } from \"mobx-state-tree\"\nimport currencyColors from \"../global/currencyColors.json\";\nimport { PRICE, VOLUME } from \"../global/consts\";\nimport axios from \"axios\";\nimport getTime from \"../utils/getTime\";\nimport normalizeNum from \"../utils/normalizeNum\";\n\nconst ECurrencyModel = types.enumeration(Object.keys(currencyColors))\n\nconst historyItem = types.model({\n    time: types.string,\n    cName: ECurrencyModel,\n    cBase: ECurrencyModel,\n    streamValue: types.number,\n    streamBy: types.enumeration([PRICE, VOLUME]),\n})\n\nconst History = types\n    .model(\"History\", {\n        historyOfPriceChange: types.array(historyItem),\n        historyOfSubsPriceChange: types.array(historyItem),\n    })\n    .volatile(self => ({\n        api: axios.create({\n            baseURL: \"https://min-api.cryptocompare.com/data/v2\",\n            timeout: 5000,\n            headers: {\n                Authorization: \"Apikey \" + process.env.REACT_APP_CC_API_KEY,\n                Accept: \"application/json\",\n                \"Content-Type\": \"application/x-www-form-urlencoded\",\n            },\n        }),\n    }))\n    .views(self => ({\n        get streamer() {\n            // @ts-ignore\n            return getRoot(self).streamer\n        },\n        get subscribedCurrency() {\n            return this.streamer.subscribedCurrency.name\n        },\n        get subscribedCurrencyBase() {\n            return this.streamer.subscribedCurrencyBase.name\n        },\n    }))\n    .actions((self) => ({\n        afterCreate() {\n            if (self.streamer.streamBy === VOLUME) {\n                this.getHistoryData()\n            }\n        },\n        getHistoryData: flow(function* () {\n            const { data, } = yield self.api(`/histominute?fsym=${self.subscribedCurrency}&tsym=${self.subscribedCurrencyBase}&limit=10`)\n            const { Data, } = data.Data\n            const history = Data.map((_historyItem: any) => ({\n                time: getTime(new Date(_historyItem.time * 1000), true),\n                cName: self.subscribedCurrency,\n                cBase: self.subscribedCurrencyBase,\n                streamValue: normalizeNum(_historyItem.volumeto / 1000),\n                streamBy: VOLUME,\n            })).slice(0, -1)\n\n            // @ts-ignore\n            self.setGlobal(...history)\n            // @ts-ignore\n            self.setSubs(...history)\n\n            console.log(Data)\n        }),\n        switchHistory: flow(function* (filterBy: (heartBeat: typeof gHistory[0]) => void) {\n            self.streamer.subscribedCurrency.streamValue = 0\n\n            const gHistory = getSnapshot(self.historyOfPriceChange)\n            const updatesForNewCurrency = gHistory.filter(filterBy)\n\n            if (updatesForNewCurrency.length) {\n                // @ts-ignore\n                self.historyOfSubsPriceChange = updatesForNewCurrency\n                //last fixed value by this params\n                self.streamer.subscribedCurrency.streamValue = updatesForNewCurrency.slice(-1)[0].streamValue\n            }\n            else {\n                self.historyOfSubsPriceChange.clear();\n\n                if (self.streamer.streamBy === VOLUME) {\n                    (self as IHistory).getHistoryData()\n                }\n            }\n        }),\n        setGlobal(...data:Array<typeof historyItem>) {\n            // @ts-ignore\n            self.historyOfPriceChange.push(...data)\n        },\n        setSubs(...data:Array<typeof historyItem>) {\n            // @ts-ignore\n            self.historyOfSubsPriceChange.push(...data)\n        },\n        // cut() {\n        //     self.historyOfPriceChange.splice(0, 15)\n        // },\n    }))\n\nexport interface IHistory extends Instance<typeof History> {}\nexport default History\n","import Streamer from \"./Streamer\";\nimport App from \"./App\";\nimport { Instance, types } from \"mobx-state-tree\";\nimport History from \"./History\";\n\nconst Store = types.model(\"Store\", {\n    streamer: types.optional(Streamer, {}),\n    app: types.optional(App, {}),\n    history: types.optional(History, {}),\n})\n\nexport interface IStore extends Instance<typeof Store> {}\n\nexport default Store.create()\n","import React, { FC } from \"react\";\nimport { inject, observer } from \"mobx-react\";\nimport store from \"../store\";\n\n//get all names of models on top level of store\nconst stores = Object.keys({ ...store, })\n\nexport const withStore = (Component: FC<any>) => (\n    inject(...stores)(observer(Component))\n)\n","import currencyColors from \"../global/currencyColors.json\";\nimport { ECurrency } from \"../global/types\";\n\nexport default function (curr: ECurrency) {\n    return currencyColors[curr] || currencyColors.DEFAULT\n}\n","import React, { FC, useMemo } from \"react\";\nimport CurrencyNameWithDot from \"./CurrencyNameWithDot\";\nimport { withStore } from \"../../../hoc/withStore\";\nimport { IStore } from \"../../../store\";\nimport cs from \"classnames\"\nimport { ECurrency } from \"../../../global/types\";\nimport withMemo from \"../../../hoc/withMemo\";\nimport compose from \"../../../utils/compose\";\n\nexport interface ISettingsProps {\n    data: ECurrency[],\n    isActive?: boolean,\n    cb: (name: ECurrency) => void\n}\n\nconst CurrencyList: FC<IStore & ISettingsProps> = ({\n    data,\n    cb,\n    isActive,\n    streamer: {\n        subscribedCurrency,\n        subscribedCurrencyBase,\n    },\n}) => {\n    const cName = subscribedCurrency.name\n    const cBase = subscribedCurrencyBase.name\n\n    const list: typeof data = useMemo(() => (\n        data?.length ? (\n            data.filter(c => c !== cName && c !== cBase)\n        ) : []\n    ), [cName, cBase])\n\n    return (list.length ?\n        <div className={cs(\"currency-list\", { active: isActive, })}>\n            <div className=\"currency-list-before\"/>\n            {\n                list.map((currencyName: ECurrency, i) => (\n                    // @ts-ignore\n                    <CurrencyNameWithDot\n                        key={i}\n                        name={currencyName}\n                        onClick={() => cb(currencyName)}\n                    />\n                ))\n            }\n        </div> : <></>\n    )\n}\n\nexport default withStore(CurrencyList);\n\n// export default compose(withStore, withMemo)(CurrencyList)\n","import React, { FC, useMemo, useState } from \"react\";\nimport { ECurrency } from \"../../../global/types\";\nimport withMemo from \"../../../hoc/withMemo\";\nimport getColorByCurrency from \"../../../utils/getColorByCurrency\";\nimport CurrencySettings, { ISettingsProps } from \"./CurrencyList\";\n\ninterface IProps {\n    name: ECurrency,\n    onClick?: () => void,\n    data: ECurrency[]\n}\n\nconst CurrencyNameWithDot:FC<IProps & ISettingsProps> =\n({\n    name,\n    cb,\n    data,\n    ...props\n}) => {\n    const [isActive, setIsActive] = useState(false)\n    const CColor = useMemo(() => getColorByCurrency(name), [name])\n\n    return (\n        <div\n            className={\"currency\"}\n            onMouseEnter={() => setIsActive(true)}\n            onMouseLeave={() => setIsActive(false)}\n            {...props}\n        >\n            <div className=\"dot\" style={{\n                background: CColor,\n                boxShadow: \"0 0 7px \" + CColor,\n            }}/>\n            <p>{name}</p>\n\n            <CurrencySettings {...{ cb, data, isActive, }}/>\n        </div>\n    );\n};\n\nexport default withMemo(CurrencyNameWithDot);\n","import React, { FC, useEffect, useState } from \"react\";\nimport cs from \"classnames\";\nimport { withStore } from \"../../../hoc/withStore\";\nimport { IStore } from \"../../../store\";\n\nconst CurrentStreamValue: FC<IStore> = ({\n    streamer: {\n        subscribedCurrency: {\n            streamValue,\n        },\n    },\n}) => {\n    const [prevStreamValue, setPrevStreamValue] = useState(0)\n    const [priceClass, setPriceClass] = useState(\"\")\n\n    useEffect(() => {\n        if (streamValue >= prevStreamValue) {\n            setPriceClass(\"green\")\n        }\n        else {\n            setPriceClass(\"red\")\n        }\n\n        setPrevStreamValue(streamValue)\n\n    }, [streamValue])\n\n\n    return (\n        <>\n            {\n                !!streamValue && <p\n                    onAnimationEnd={() => setPriceClass(\"\")}\n                    className={cs(\"price-lighten\", priceClass)}\n                >\n                    curr: {streamValue}\n                </p>\n            }\n        </>\n    );\n};\n\nexport default withStore(CurrentStreamValue)\n","import React, { FC } from \"react\";\nimport { withStore } from \"../../../hoc/withStore\";\nimport { IStore } from \"../../../store\";\nimport cs from \"classnames\";\nimport { PRICE, VOLUME } from \"../../../global/consts\";\n\nconst CustomSwitch: FC<IStore> = ({\n    streamer: {\n        streamBy,\n        setStreamBy,\n    },\n}) => {\n    function volActive() {\n        setStreamBy(VOLUME)\n    }\n    function priceActive() {\n        setStreamBy(PRICE)\n    }\n\n    return (\n        <div className={\"switch\"}>\n            <div onClick={volActive} className={cs({ active: streamBy === VOLUME, })}>\n                VOL\n            </div>\n            <div onClick={priceActive} className={cs({ active: streamBy === PRICE, })}>\n                PRICE\n            </div>\n            {/*<span>VOL</span>*/}\n            {/*<span>PRICE</span>*/}\n        </div>\n    );\n};\n\nexport default withStore(CustomSwitch);\n","import React, { FC } from \"react\";\nimport { withStore } from \"../../../hoc/withStore\";\nimport { IStore } from \"../../../store\";\nimport { ECurrency } from \"../../../global/types\";\nimport CurrencyNameWithDot from \"./CurrencyNameWithDot\";\nimport compose from \"../../../utils/compose\";\nimport withMemo from \"../../../hoc/withMemo\";\nimport CurrentPrice from \"./CurrentStreamValue\";\nimport CustomSwitch from \"./CustomSwitch\";\n\nconst ChartParams: FC<IStore> = ({\n    streamer: {\n        subscribedCurrency,\n        streamBySimpleCurrency,\n        streamByCryptoCurrency,\n        subscribedCurrencyBase,\n    },\n}) => {\n    return (\n        <div className=\"currency main\">\n            <CurrentPrice/>\n\n            <CustomSwitch/>\n\n            <CurrencyNameWithDot\n                name={subscribedCurrency.name as ECurrency}\n                data={[\"BTC\", \"ETH\", \"XRP\", \"LTC\"]}\n                cb={streamByCryptoCurrency}\n            />\n\n            <CurrencyNameWithDot\n                name={subscribedCurrencyBase.name as ECurrency}\n                data={[\"USD\", \"EUR\", \"JPY\", \"USDT\"]}\n                cb={streamBySimpleCurrency}\n            />\n        </div>\n    );\n};\n\nexport default withStore(ChartParams)\n\n// export default compose(withStore, withMemo)(ChartParams)\n","export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React from \"react\";\nimport logo from \"../logo.svg\";\n\nconst Loader = () => {\n    return (\n        <div className={\"nullChart\"}>\n            <span>The data will appear here</span>\n            <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        </div>\n    );\n};\n\nexport default Loader;\n","import React, { FC, useEffect } from \"react\";\nimport { getSnapshot } from \"mobx-state-tree\";\nimport { Area, AreaChart, CartesianGrid, Tooltip, XAxis, YAxis } from \"recharts\";\nimport { withStore } from \"../../hoc/withStore\";\nimport { IStore } from \"../../store\";\nimport getColorByCurrency from \"../../utils/getColorByCurrency\";\nimport { ECurrency } from \"../../global/types\";\nimport Loader from \"../Loader\";\n\nconst MainChart:FC<IStore> = ({\n    streamer: {\n        subscribedCurrency,\n        subscribedCurrencyBase,\n        streamBy,\n    },\n    history: {\n        historyOfSubsPriceChange,\n        historyOfPriceChange,\n    },\n}) => {\n\n    const tick = {\n        fontSize: 11,\n    }\n\n    useEffect(() => {\n        console.log(streamBy, \"__streamBy__\")\n    }, [streamBy])\n\n    useEffect(() => {\n        console.log(getSnapshot(historyOfPriceChange), \"__historyOfPriceChange__\")\n    }, [historyOfPriceChange.length])\n\n    const fromColor = getColorByCurrency(subscribedCurrency.name as ECurrency)\n    const toColor = getColorByCurrency(subscribedCurrencyBase.name as ECurrency)\n\n    const data = getSnapshot(historyOfSubsPriceChange)\n    const isDataNull = data.length < 2\n\n\n    return (\n        <>\n            {isDataNull && <Loader/>}\n            <AreaChart\n                width={window.innerWidth - 100}\n                height={400}\n                data={isDataNull ? [] : data}\n            >\n                <defs>\n                    <linearGradient id=\"colorUv\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n                        <stop offset=\"5%\" stopColor={fromColor} stopOpacity={0.8}/>\n                        <stop offset=\"95%\" stopColor={toColor} stopOpacity={0.1}/>\n                    </linearGradient>\n                </defs>\n                <CartesianGrid strokeDasharray=\"3\" />\n                <XAxis dataKey=\"time\" { ...{ tick, }} />\n                <YAxis domain={[\"dataMin\", \"dataMax\"]} { ...{ tick, }} />\n                <Tooltip />\n                <Area\n                    type=\"monotone\"\n                    name={streamBy}\n                    dataKey={\"streamValue\"}\n                    stroke={fromColor}\n                    fillOpacity={1}\n                    fill=\"url(#colorUv)\"\n                />\n            </AreaChart>\n        </>\n    );\n};\n\nexport default withStore(MainChart);\n","import React from \"react\";\nimport ChartParams from \"./Chart/Params/ChartParams\";\nimport MainChart from \"./Chart/MainChart\";\n\nconst AppBody = () => {\n    return (\n        <>\n            <ChartParams/>\n            <MainChart/>\n        </>\n    );\n};\n\nexport default AppBody;\n","import \"../scss/App.scss\";\nimport React, { FC } from \"react\";\nimport { IStore } from \"../store\";\nimport { withStore } from \"../hoc/withStore\";\nimport AppBody from \"./AppBody\";\nimport Loader from \"./Loader\";\n\nconst App:FC<IStore> = ({\n    streamer: {\n        historyOfSubsPriceChange,\n    },\n}) => {\n\n\n    return (\n        <div className=\"App\">\n            <div className=\"App-body\">\n                {\n                    // historyOfSubsPriceChange.length ?\n                    <AppBody/>\n                    // : <Loader/>\n                }\n            </div>\n        </div>\n    );\n}\n\nexport default withStore(App);\n\n//TODO remove unused packages\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./scss/index.scss\";\nimport App from \"../src/components/App\";\nimport store from \"./store\";\nimport { Provider } from \"mobx-react\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider {...store}>\n            <App />\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n"],"sourceRoot":""}