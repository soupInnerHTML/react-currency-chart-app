{"version":3,"sources":["utils/getTime.ts","hoc/withMemo.tsx","global/consts.js","store/Streamer.ts","store/App.ts","store/index.ts","hoc/withStore.tsx","utils/getColorByCurrency.ts","components/Chart/Params/CurrencyList.tsx","components/Chart/Params/CurrencyNameWithDot.tsx","components/Chart/Params/CurrentStreamValue.tsx","components/Chart/Params/CustomSwitch.tsx","components/Chart/Params/ChartParams.tsx","logo.svg","components/Loader.tsx","components/Chart/MainChart.tsx","components/AppBody.tsx","components/App.tsx","index.tsx"],"names":["_parseDozens","val","Component","date","Date","d","getHours","getMinutes","getSeconds","map","i","join","PRICE","VOLUME","ECurrencyModel","types","enumeration","Object","keys","currencyColors","historyItem","model","time","string","cName","cBase","streamBy","number","streamBase","currency","name","streamValue","optional","Streamer","subscribedCurrency","subscribedCurrencyBase","historyOfPriceChange","array","historyOfSubsPriceChange","volatile","self","ccStreamer","WebSocket","channel","actions","afterCreate","onopen","subRequest","send","JSON","stringify","onmessage","this","onStreamMessage","onerror","e","console","log","message","data","parse","_streamBy","Number","toUpperCase","toFixed","push","FROMSYMBOL","TOSYMBOL","getTime","length","splice","switchHistory","filterBy","clear","updatesForNewCurrency","getSnapshot","filter","slice","streamByCurrencies","simpleCurrencyName","cryptoCurrencyName","heartBeat","streamBySimpleCurrency","streamByCryptoCurrency","setStreamBy","App","isReady","isDisconnect","isDisconnectHappened","ready","flag","disconnect","Store","streamer","app","create","stores","store","withStore","inject","observer","curr","DEFAULT","cb","isActive","list","useMemo","c","className","cs","active","currencyName","onClick","withMemo","props","useState","setIsActive","CColor","getColorByCurrency","onMouseEnter","onMouseLeave","style","background","boxShadow","React","memo","prev","next","prevStreamValue","setPrevStreamValue","priceClass","setPriceClass","useEffect","onAnimationEnd","Loader","src","logo","alt","tick","fontSize","fromColor","toColor","isDataNull","AreaChart","width","window","innerWidth","height","id","x1","y1","x2","y2","offset","stopColor","stopOpacity","CartesianGrid","strokeDasharray","XAxis","dataKey","YAxis","domain","Tooltip","Area","type","stroke","fillOpacity","fill","ReferenceLine","x","AppBody","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e9dcc06a.chunk.js","sourcesContent":["function _parseDozens(val: number) {\n    return val < 10 ? \"0\" + val : val\n}\n\nexport default function (date = new Date()) {\n    const d = new Date(date)\n    return [\n        d.getHours(),\n        d.getMinutes(),\n        d.getSeconds()\n    ]\n        .map(i => _parseDozens(i))\n        .join(\":\")\n}\n// example output 23:59:59 | 00:01:01\n","import React, { FC } from \"react\";\n// import { IStore } from \"../store\";\n\nexport default (Component: FC<any>) => (\n    React.memo(\n        Component,\n        (prev, next) => (\n            JSON.stringify(prev) === JSON.stringify(next)\n        )\n    )\n)\n","export const PRICE = \"price\"\nexport const VOLUME = \"lastVolumeTo\"\n","import { getSnapshot, types } from \"mobx-state-tree\"\nimport getTime from \"../utils/getTime\";\nimport currencyColors from \"../global/currencyColors.json\";\nimport { ECurrency } from \"../global/types\";\nimport { PRICE, VOLUME } from \"../global/consts\";\n\nconst ECurrencyModel = types.enumeration(Object.keys(currencyColors))\n\nconst historyItem = types.model({\n    time: types.string,\n    cName: ECurrencyModel,\n    cBase: ECurrencyModel,\n    streamBy: types.number,\n    streamBase: types.enumeration([PRICE, VOLUME]),\n})\n\nconst currency = types.model({\n    name: ECurrencyModel,\n    streamValue: types.optional(types.number, 0),\n})\n\nconst Streamer = types\n    .model(\"Streamer\", {\n        streamBy: types.optional(types.string, PRICE),\n        subscribedCurrency: types.optional(currency, { name: \"BTC\", }),\n        subscribedCurrencyBase: types.optional(currency, { name: \"USD\", }),\n        historyOfPriceChange: types.array(historyItem),\n        historyOfSubsPriceChange: types.array(historyItem),\n    })\n\n    .volatile(self => ({\n        ccStreamer: new WebSocket(\"wss://streamer.cryptocompare.com/v2?api_key=\" + process.env.REACT_APP_CC_API_KEY),\n        channel: \"5~CCCAGG\",\n    }))\n    .actions((self) => ({\n        afterCreate() {\n            self.ccStreamer.onopen = function onStreamOpen() {\n                let subRequest = {\n                    \"action\": \"SubAdd\",\n                    \"subs\": [`${self.channel}~${self.subscribedCurrency.name}~${self.subscribedCurrencyBase.name}`],\n                };\n                self.ccStreamer.send(JSON.stringify(subRequest));\n            }\n\n            self.ccStreamer.onmessage = this.onStreamMessage\n\n            self.ccStreamer.onerror = (e) => console.log(e)\n\n        },\n        onStreamMessage(message: {data: string}) {\n            const data = JSON.parse(message.data)\n            const _streamBy = Number(data[self.streamBy.toUpperCase()]?.toFixed(3))\n            if (_streamBy) {\n                self.historyOfPriceChange.push({\n                    cName: data.FROMSYMBOL,\n                    cBase: data.TOSYMBOL,\n                    time: getTime(),\n                    streamBy: _streamBy,\n                    streamBase: self.streamBy as any,\n                })\n\n                if (\n                    data.TOSYMBOL === self.subscribedCurrencyBase.name\n                    &&\n                    data.FROMSYMBOL === self.subscribedCurrency.name\n                ) {\n                    self.subscribedCurrency.streamValue = _streamBy\n\n                    self.historyOfSubsPriceChange.push({\n                        time: getTime(),\n                        cName: data.FROMSYMBOL,\n                        cBase: data.TOSYMBOL,\n                        streamBy: _streamBy,\n                        streamBase: self.streamBy as any,\n                    })\n                }\n\n                if (self.historyOfSubsPriceChange.length > 20) {\n                    self.historyOfSubsPriceChange.splice(0, 15)\n                }\n\n                if (self.historyOfPriceChange.length > 20) {\n                    self.historyOfPriceChange.splice(0, 15)\n                }\n            }\n        },\n        switchHistory(filterBy: (heartBeat: typeof gHistory[0]) => void) {\n            self.historyOfSubsPriceChange.clear()\n            self.subscribedCurrency.streamValue = 0\n\n            const gHistory = getSnapshot(self.historyOfPriceChange)\n            const updatesForNewCurrency = gHistory.filter(filterBy)\n\n            if (updatesForNewCurrency.length) {\n                self.historyOfSubsPriceChange.push(...updatesForNewCurrency)\n                self.subscribedCurrency.streamValue = updatesForNewCurrency.slice(-1)[0].streamBy\n            }\n        },\n        streamByCurrencies(simpleCurrencyName: ECurrency, cryptoCurrencyName: ECurrency) {\n            this.switchHistory((heartBeat) => (\n                heartBeat.cBase === simpleCurrencyName && heartBeat.cName === cryptoCurrencyName\n            ))\n\n            self.subscribedCurrencyBase.name = simpleCurrencyName\n            self.subscribedCurrency.name = cryptoCurrencyName\n\n            let subRequest = {\n                \"action\": \"SubAdd\",\n                \"subs\": [`${self.channel}~${cryptoCurrencyName}~${simpleCurrencyName}`],\n            };\n            self.ccStreamer.send(JSON.stringify(subRequest));\n        },\n        streamBySimpleCurrency(simpleCurrencyName: ECurrency) {\n            this.streamByCurrencies(simpleCurrencyName, self.subscribedCurrency.name as ECurrency)\n        },\n        streamByCryptoCurrency(cryptoCurrencyName: ECurrency) {\n            this.streamByCurrencies(self.subscribedCurrencyBase.name as ECurrency, cryptoCurrencyName)\n        },\n        setStreamBy(_streamBy: typeof PRICE | typeof VOLUME) {\n            this.switchHistory((heartBeat) => (\n                heartBeat.streamBase === _streamBy && heartBeat.streamBy\n            ))\n            self.streamBy = _streamBy\n        },\n    }))\n\n// export interface IStreamer extends Instance<typeof Streamer> {}\nexport default Streamer\n","import { Instance, types } from \"mobx-state-tree\"\n\n\nconst App = types\n    .model(\"App\", {\n        isReady: false,\n        isDisconnect: false,\n        isDisconnectHappened: false,\n    })\n    .actions(self => ({\n        ready: (flag = true) => {\n            self.isReady = flag\n        },\n        disconnect: (flag = true) => {\n            self.isDisconnect = flag\n            self.isDisconnectHappened = true\n        },\n    }))\n\n\nexport interface IApp extends Instance<typeof App> {}\nexport default App\n","import Streamer from \"./Streamer\";\nimport App from \"./App\";\nimport { Instance, types } from \"mobx-state-tree\";\n\nconst Store = types.model(\"Store\", {\n    streamer: types.optional(Streamer, {}),\n    app: types.optional(App, {}),\n})\n\nexport interface IStore extends Instance<typeof Store> {}\n\nexport default Store.create()\n","import React, { FC } from \"react\";\nimport { inject, observer } from \"mobx-react\";\nimport store from \"../store\";\n\n//get all names of models on top level of store\nconst stores = Object.keys({ ...store, })\n\nexport const withStore = (Component: FC<any>) => (\n    inject(...stores)(observer(Component))\n)\n","import currencyColors from \"../global/currencyColors.json\";\nimport { ECurrency } from \"../global/types\";\n\nexport default function (curr: ECurrency) {\n    return currencyColors[curr] || currencyColors.DEFAULT\n}\n","import React, { FC, useMemo } from \"react\";\nimport CurrencyNameWithDot from \"./CurrencyNameWithDot\";\nimport { withStore } from \"../../../hoc/withStore\";\nimport { IStore } from \"../../../store\";\nimport cs from \"classnames\"\nimport { ECurrency } from \"../../../global/types\";\nimport withMemo from \"../../../hoc/withMemo\";\nimport compose from \"../../../utils/compose\";\n\nexport interface ISettingsProps {\n    data: ECurrency[],\n    isActive?: boolean,\n    cb: (name: ECurrency) => void\n}\n\nconst CurrencyList: FC<IStore & ISettingsProps> = ({\n    data,\n    cb,\n    isActive,\n    streamer: {\n        subscribedCurrency,\n        subscribedCurrencyBase,\n    },\n}) => {\n    const cName = subscribedCurrency.name\n    const cBase = subscribedCurrencyBase.name\n\n    const list: typeof data = useMemo(() => (\n        data?.length ? (\n            data.filter(c => c !== cName && c !== cBase)\n        ) : []\n    ), [cName, cBase])\n\n    return (list.length ?\n        <div className={cs(\"currency-list\", { active: isActive, })}>\n            <div className=\"currency-list-before\"/>\n            {\n                list.map((currencyName: ECurrency, i) => (\n                    // @ts-ignore\n                    <CurrencyNameWithDot\n                        key={i}\n                        name={currencyName}\n                        onClick={() => cb(currencyName)}\n                    />\n                ))\n            }\n        </div> : <></>\n    )\n}\n\nexport default withStore(CurrencyList);\n\n// export default compose(withStore, withMemo)(CurrencyList)\n","import React, { FC, useMemo, useState } from \"react\";\nimport { ECurrency } from \"../../../global/types\";\nimport withMemo from \"../../../hoc/withMemo\";\nimport getColorByCurrency from \"../../../utils/getColorByCurrency\";\nimport CurrencySettings, { ISettingsProps } from \"./CurrencyList\";\n\ninterface IProps {\n    name: ECurrency,\n    onClick?: () => void,\n    data: ECurrency[]\n}\n\nconst CurrencyNameWithDot:FC<IProps & ISettingsProps> =\n({\n    name,\n    cb,\n    data,\n    ...props\n}) => {\n    const [isActive, setIsActive] = useState(false)\n    const CColor = useMemo(() => getColorByCurrency(name), [name])\n\n    return (\n        <div\n            className={\"currency\"}\n            onMouseEnter={() => setIsActive(true)}\n            onMouseLeave={() => setIsActive(false)}\n            {...props}\n        >\n            <div className=\"dot\" style={{\n                background: CColor,\n                boxShadow: \"0 0 7px \" + CColor,\n            }}/>\n            <p>{name}</p>\n\n            <CurrencySettings {...{ cb, data, isActive, }}/>\n        </div>\n    );\n};\n\nexport default withMemo(CurrencyNameWithDot);\n","import React, { FC, useEffect, useState } from \"react\";\nimport cs from \"classnames\";\nimport { withStore } from \"../../../hoc/withStore\";\nimport { IStore } from \"../../../store\";\n\nconst CurrentStreamValue: FC<IStore> = ({\n    streamer: {\n        subscribedCurrency: {\n            streamValue,\n        },\n    },\n}) => {\n    const [prevStreamValue, setPrevStreamValue] = useState(0)\n    const [priceClass, setPriceClass] = useState(\"\")\n\n    useEffect(() => {\n        if (streamValue >= prevStreamValue) {\n            setPriceClass(\"green\")\n        }\n        else {\n            setPriceClass(\"red\")\n        }\n\n        setPrevStreamValue(streamValue)\n\n    }, [streamValue])\n\n\n    return (\n        <>\n            {\n                !!streamValue && <p\n                    onAnimationEnd={() => setPriceClass(\"\")}\n                    className={cs(\"price-lighten\", priceClass)}\n                >\n                    curr: {streamValue}\n                </p>\n            }\n        </>\n    );\n};\n\nexport default withStore(CurrentStreamValue)\n","import React, { FC } from \"react\";\nimport { withStore } from \"../../../hoc/withStore\";\nimport { IStore } from \"../../../store\";\nimport cs from \"classnames\";\nimport { PRICE, VOLUME } from \"../../../global/consts\";\n\nconst CustomSwitch: FC<IStore> = ({\n    streamer: {\n        streamBy,\n        setStreamBy,\n    },\n}) => {\n    function volActive() {\n        setStreamBy(VOLUME)\n    }\n    function priceActive() {\n        setStreamBy(PRICE)\n    }\n\n    return (\n        <div className={\"switch\"}>\n            <div onClick={volActive} className={cs({ active: streamBy === VOLUME, })}>\n                VOL\n            </div>\n            <div onClick={priceActive} className={cs({ active: streamBy === PRICE, })}>\n                PRICE\n            </div>\n            {/*<span>VOL</span>*/}\n            {/*<span>PRICE</span>*/}\n        </div>\n    );\n};\n\nexport default withStore(CustomSwitch);\n","import React, { FC } from \"react\";\nimport { withStore } from \"../../../hoc/withStore\";\nimport { IStore } from \"../../../store\";\nimport { ECurrency } from \"../../../global/types\";\nimport CurrencyNameWithDot from \"./CurrencyNameWithDot\";\nimport compose from \"../../../utils/compose\";\nimport withMemo from \"../../../hoc/withMemo\";\nimport CurrentPrice from \"./CurrentStreamValue\";\nimport CustomSwitch from \"./CustomSwitch\";\n\nconst ChartParams: FC<IStore> = ({\n    streamer: {\n        subscribedCurrency,\n        streamBySimpleCurrency,\n        streamByCryptoCurrency,\n        subscribedCurrencyBase,\n    },\n}) => {\n    return (\n        <div className=\"currency main\">\n            <CurrentPrice/>\n\n            <CustomSwitch/>\n\n            <CurrencyNameWithDot\n                name={subscribedCurrency.name as ECurrency}\n                data={[\"BTC\", \"ETH\", \"XRP\", \"LTC\"]}\n                cb={streamByCryptoCurrency}\n            />\n\n            <CurrencyNameWithDot\n                name={subscribedCurrencyBase.name as ECurrency}\n                data={[\"USD\", \"EUR\", \"JPY\", \"USDT\"]}\n                cb={streamBySimpleCurrency}\n            />\n        </div>\n    );\n};\n\nexport default withStore(ChartParams)\n\n// export default compose(withStore, withMemo)(ChartParams)\n","export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React from \"react\";\nimport logo from \"../logo.svg\";\n\nconst Loader = () => {\n    return (\n        <div className={\"nullChart\"}>\n            <span>The data will appear here</span>\n            <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        </div>\n    );\n};\n\nexport default Loader;\n","import React, { FC } from \"react\";\nimport { getSnapshot } from \"mobx-state-tree\";\nimport { Area, AreaChart, CartesianGrid, ReferenceLine, Tooltip, XAxis, YAxis } from \"recharts\";\nimport { withStore } from \"../../hoc/withStore\";\nimport { IStore } from \"../../store\";\nimport getColorByCurrency from \"../../utils/getColorByCurrency\";\nimport { ECurrency } from \"../../global/types\";\nimport getTime from \"../../utils/getTime\";\nimport Loader from \"../Loader\";\n\nconst MainChart:FC<IStore> = ({\n    streamer: {\n        historyOfSubsPriceChange,\n        subscribedCurrency,\n        subscribedCurrencyBase,\n        streamBy,\n    }, }) => {\n\n    const tick = {\n        fontSize: 11,\n    }\n\n    const fromColor = getColorByCurrency(subscribedCurrency.name as ECurrency)\n    const toColor = getColorByCurrency(subscribedCurrencyBase.name as ECurrency)\n\n    const data = getSnapshot(historyOfSubsPriceChange)\n    const isDataNull = data.length < 2\n\n    return (\n        <>\n            {isDataNull && <Loader/>}\n            <AreaChart\n                width={window.innerWidth - 100}\n                height={400}\n                data={isDataNull ? [] : data}\n            >\n                <defs>\n                    <linearGradient id=\"colorUv\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n                        <stop offset=\"5%\" stopColor={fromColor} stopOpacity={0.8}/>\n                        <stop offset=\"95%\" stopColor={toColor} stopOpacity={0.1}/>\n                    </linearGradient>\n                </defs>\n                <CartesianGrid strokeDasharray=\"3 3\" />\n                <XAxis dataKey=\"time\" { ...{ tick, }} />\n                <YAxis domain={[\"dataMin\", \"dataMax\"]} { ...{ tick, }} />\n                <Tooltip />\n                <Area\n                    type=\"monotone\"\n                    name={streamBy}\n                    dataKey={\"streamBy\"}\n                    stroke={fromColor}\n                    fillOpacity={1}\n                    fill=\"url(#colorUv)\"\n                />\n                <ReferenceLine x={getTime()} />\n            </AreaChart>\n        </>\n    );\n};\n\nexport default withStore(MainChart);\n","import React from \"react\";\nimport ChartParams from \"./Chart/Params/ChartParams\";\nimport MainChart from \"./Chart/MainChart\";\n\nconst AppBody = () => {\n    return (\n        <>\n            <ChartParams/>\n            <MainChart/>\n        </>\n    );\n};\n\nexport default AppBody;\n","import \"../scss/App.scss\";\nimport React, { FC } from \"react\";\nimport { IStore } from \"../store\";\nimport { withStore } from \"../hoc/withStore\";\nimport AppBody from \"./AppBody\";\nimport Loader from \"./Loader\";\n\nconst App:FC<IStore> = ({\n    streamer: {\n        historyOfSubsPriceChange,\n    },\n}) => {\n\n\n    return (\n        <div className=\"App\">\n            <div className=\"App-body\">\n                {\n                    // historyOfSubsPriceChange.length ?\n                    <AppBody/>\n                    // : <Loader/>\n                }\n            </div>\n        </div>\n    );\n}\n\nexport default withStore(App);\n\n//TODO remove unused packages\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./scss/index.scss\";\nimport App from \"../src/components/App\";\nimport store from \"./store\";\nimport { Provider } from \"mobx-react\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider {...store}>\n            <App />\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n"],"sourceRoot":""}