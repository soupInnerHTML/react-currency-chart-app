{"version":3,"sources":["global/consts.ts","utils/getTime.ts","utils/normalizeNum.ts","store/Streamer.ts","store/History.ts","store/News.ts","store/ChartParams.ts","store/index.ts","hoc/withStore.tsx","utils/getColorByCurrency.ts","components/Chart/Params/CurrencyList.tsx","components/Chart/Params/CurrencyNameWithDot.tsx","components/Chart/Params/CurrentStreamValue.tsx","components/Chart/Params/StreamBaseSwitch.tsx","components/Chart/Params/ChartParams.tsx","logo.svg","components/Loader.tsx","components/Chart/MainChart.tsx","components/BuyButton.tsx","components/News/NewsItem.tsx","components/News/index.tsx","components/AppBody.tsx","components/App.tsx","index.tsx"],"names":["PRICE","_parseDozens","val","date","Date","isWithSeconds","d","getHours","getMinutes","getSeconds","filter","_","i","map","join","num","Number","toFixed","ECurrencyModel","types","enumeration","Object","keys","currencyColors","currency","model","name","streamValue","optional","number","Streamer","streamBy","string","subscribedCurrency","subscribedCurrencyBase","chartType","volatile","self","ccStreamer","WebSocket","channel","views","getRoot","history","actions","afterCreate","onopen","subRequest","send","JSON","stringify","onmessage","this","onStreamMessage","onerror","e","console","log","message","data","parse","_streamBy","normalizeNum","toUpperCase","selectedItem","time","getTime","cName","FROMSYMBOL","cBase","TOSYMBOL","setGlobal","setSubs","streamByCurrencies","simpleCurrencyName","cryptoCurrencyName","switchHistory","heartBeat","streamBySimpleCurrency","streamByCryptoCurrency","setStreamBy","updateSubscribedCurrencyByLast","arr","slice","setChartType","charType","historyItem","History","historyOfPriceChange","array","historyOfSubsPriceChange","api","axios","create","baseURL","timeout","headers","Authorization","Accept","streamer","getHistoryData","flow","Data","_historyItem","open","filterBy","gHistory","getSnapshot","updatesForNewCurrency","length","clear","push","NewsItem","id","published","guid","imageurl","title","url","source","body","tags","categories","upvotes","downvotes","lang","News","newsData","root","fetchData","get","_data","published_on","reaction","ChartParams","activeCryptoSelect","setActiveCryptoSelect","Store","news","chartParams","stores","store","withStore","Component","inject","observer","curr","DEFAULT","cb","isActive","list","useMemo","chunk","c","onClick","currencyName","className","cs","active","style","zIndex","sublist","props","CColor","getColorByCurrency","useState","touched","touch","setActive","useCallback","setInactive","untouched","background","boxShadow","prevStreamValue","setPrevStreamValue","priceClass","setPriceClass","useEffect","onAnimationEnd","activeSelectId","setActiveSelectId","Loader","src","logo","alt","MainLineChart","tick","fontSize","fromColor","toColor","isDataNull","AreaChart","width","window","innerWidth","height","x1","y1","x2","y2","offset","stopColor","stopOpacity","CartesianGrid","strokeDasharray","XAxis","dataKey","YAxis","orientation","allowDataOverflow","domain","Tooltip","Area","type","stroke","fillOpacity","fill","MainChartBar","Math","min","entry","max","BarChart","Bar","index","Cell","link","target","href","dayjs","extend","relativeTime","fromNow","split","category","color","borderColor","newsItem","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.79e5b4dd.chunk.js","sourcesContent":["export const PRICE = \"price\"\nexport const VOLUME = \"lastVolumeTo\"\n","function _parseDozens(val: number) {\n    return val < 10 ? \"0\" + val : val\n}\n\nexport default function (date = new Date(), isWithSeconds = false) {\n    const d = new Date(date)\n    return [\n        d.getHours(),\n        d.getMinutes(),\n        d.getSeconds()\n    ]\n        .filter((_, i) => isWithSeconds ? i !== 2 : true)\n        .map(i => _parseDozens(i))\n        .join(\":\")\n}\n// example output 23:59:59 | 00:01:01\n","export default function (num: any) {\n    return Number(num?.toFixed(3))\n}\n","import { getRoot, Instance, types } from \"mobx-state-tree\"\nimport { ECurrency } from \"../global/types\";\nimport { PRICE, VOLUME } from \"../global/consts\";\nimport { IHistory, IHistoryItem } from \"./History\";\nimport getTime from \"../utils/getTime\";\nimport currencyColors from \"../global/currencyColors.json\";\nimport normalizeNum from \"../utils/normalizeNum\";\n\nexport const ECurrencyModel = types.enumeration(Object.keys(currencyColors))\n\nconst currency = types.model({\n    name: ECurrencyModel,\n    streamValue: types.optional(types.number, 0),\n})\n\nconst Streamer = types\n    .model(\"Streamer\", {\n        streamBy: types.optional(types.string, PRICE),\n        subscribedCurrency: types.optional(currency, { name: \"BTC\", }),\n        subscribedCurrencyBase: types.optional(currency, { name: \"USD\", }),\n        chartType: types.optional(types.enumeration([\"line\", \"bar\"]), \"line\"),\n    })\n    .volatile(self => ({\n        ccStreamer: new WebSocket(\"wss://streamer.cryptocompare.com/v2?api_key=\" + process.env.REACT_APP_CC_API_KEY),\n        channel: \"5~CCCAGG\",\n    }))\n    .views(self => ({\n        get history() {\n            return (getRoot(self) as any).history as IHistory\n        },\n    }))\n    .actions((self) => ({\n        afterCreate() {\n            self.ccStreamer.onopen = function onStreamOpen() {\n                let subRequest = {\n                    \"action\": \"SubAdd\",\n                    \"subs\": [`${self.channel}~${self.subscribedCurrency.name}~${self.subscribedCurrencyBase.name}`],\n                };\n                self.ccStreamer.send(JSON.stringify(subRequest));\n            }\n\n            self.ccStreamer.onmessage = this.onStreamMessage\n\n            self.ccStreamer.onerror = (e) => console.log(e)\n\n        },\n        onStreamMessage(message: {data: string}) {\n            const data = JSON.parse(message.data)\n            const _streamBy = normalizeNum(data[self.streamBy.toUpperCase()])\n            if (_streamBy) {\n                const selectedItem = {\n                    time: getTime(),\n                    cName: data.FROMSYMBOL,\n                    cBase: data.TOSYMBOL,\n                    streamValue: _streamBy,\n                    streamBy: self.streamBy as any,\n                }\n\n                self.history.setGlobal(selectedItem)\n\n                if (\n                    data.TOSYMBOL === self.subscribedCurrencyBase.name &&\n                    data.FROMSYMBOL === self.subscribedCurrency.name\n                ) {\n                    self.subscribedCurrency.streamValue = _streamBy\n                    self.history.setSubs(selectedItem)\n                }\n            }\n        },\n        streamByCurrencies(simpleCurrencyName: ECurrency, cryptoCurrencyName: ECurrency) {\n            self.subscribedCurrencyBase.name = simpleCurrencyName\n            self.subscribedCurrency.name = cryptoCurrencyName\n\n            self.history.switchHistory((heartBeat: IHistoryItem) => (\n                heartBeat.cBase === simpleCurrencyName &&\n                heartBeat.cName === cryptoCurrencyName &&\n                heartBeat.streamBy === self.streamBy\n            ))\n\n            let subRequest = {\n                \"action\": \"SubAdd\",\n                \"subs\": [`${self.channel}~${cryptoCurrencyName}~${simpleCurrencyName}`],\n            };\n            self.ccStreamer.send(JSON.stringify(subRequest));\n        },\n        streamBySimpleCurrency(simpleCurrencyName: ECurrency) {\n            this.streamByCurrencies(simpleCurrencyName, self.subscribedCurrency.name as ECurrency)\n        },\n        streamByCryptoCurrency(cryptoCurrencyName: ECurrency) {\n            this.streamByCurrencies(self.subscribedCurrencyBase.name as ECurrency, cryptoCurrencyName)\n        },\n        setStreamBy(_streamBy: typeof PRICE | typeof VOLUME) {\n            self.streamBy = _streamBy\n            self.history.switchHistory((heartBeat: IHistoryItem) => (\n                heartBeat.streamBy === _streamBy && heartBeat.streamValue\n            ))\n        },\n        updateSubscribedCurrencyByLast(arr: Array<IHistoryItem>) {\n            self.subscribedCurrency.streamValue = arr.slice(-1)[0].streamValue\n        },\n        setChartType(charType: \"line\" | \"bar\") {\n            self.chartType = charType;\n        },\n    }))\n\nexport interface IStreamer extends Instance<typeof Streamer> {}\nexport default Streamer\n","import { addMiddleware, flow, getRoot, getSnapshot, Instance, types } from \"mobx-state-tree\"\nimport currencyColors from \"../global/currencyColors.json\";\nimport { PRICE, VOLUME } from \"../global/consts\";\nimport axios from \"axios\";\nimport getTime from \"../utils/getTime\";\nimport normalizeNum from \"../utils/normalizeNum\";\nimport { IStreamer } from \"./Streamer\";\n\nconst ECurrencyModel = types.enumeration(Object.keys(currencyColors))\n\nconst historyItem = types.model({\n    time: types.string,\n    cName: ECurrencyModel,\n    cBase: ECurrencyModel,\n    streamValue: types.number,\n    streamBy: types.enumeration([PRICE, VOLUME]),\n})\n\nconst History = types\n    .model(\"History\", {\n        historyOfPriceChange: types.array(historyItem),\n        historyOfSubsPriceChange: types.array(historyItem),\n    })\n    .volatile(self => ({\n        api: axios.create({\n            baseURL: \"https://min-api.cryptocompare.com/data/v2\",\n            timeout: 5000,\n            headers: {\n                Authorization: \"Apikey \" + process.env.REACT_APP_CC_API_KEY,\n                Accept: \"application/json\",\n                \"Content-Type\": \"application/x-www-form-urlencoded\",\n            },\n        }),\n    }))\n    .views(self => ({\n        get streamer() {\n            return (getRoot(self) as any).streamer as IStreamer;\n        },\n        get subscribedCurrency() {\n            return this.streamer.subscribedCurrency.name\n        },\n        get subscribedCurrencyBase() {\n            return this.streamer.subscribedCurrencyBase.name\n        },\n    }))\n    .actions((self) => ({\n        afterCreate() {\n            this.getHistoryData()\n        },\n        getHistoryData: flow(function* () {\n            if (self.streamer.streamBy === PRICE) {\n                const { data, } = yield self.api(`/histominute?fsym=${self.subscribedCurrency}&tsym=${self.subscribedCurrencyBase}&limit=50`)\n                const { Data, } = data.Data\n                const history = Data.map((_historyItem: any) => ({\n                    time: getTime(new Date(_historyItem.time * 1000), true),\n                    cName: self.subscribedCurrency,\n                    cBase: self.subscribedCurrencyBase,\n                    streamValue: normalizeNum(_historyItem.open),\n                    streamBy: PRICE,\n                })).slice(0, -1);\n\n\n                (self as IHistory).setGlobal(...history);\n                (self as IHistory).setSubs(...history);\n\n                self.streamer.updateSubscribedCurrencyByLast(history)\n            }\n        }),\n        switchHistory: flow(function* (filterBy: (heartBeat: IHistoryItem) => void) {\n            self.streamer.subscribedCurrency.streamValue = 0\n\n            const gHistory = getSnapshot(self.historyOfPriceChange)\n            const updatesForNewCurrency = gHistory.filter(filterBy)\n\n            if (updatesForNewCurrency.length) {\n                (self.historyOfSubsPriceChange as Array<IHistoryItem>) = updatesForNewCurrency as Array<IHistoryItem>\n                self.streamer.updateSubscribedCurrencyByLast(updatesForNewCurrency)\n            }\n            else {\n                self.historyOfSubsPriceChange.clear();\n                (self as IHistory).getHistoryData()\n            }\n        }),\n        setGlobal(...data:Array<IHistoryItem>) {\n            self.historyOfPriceChange.push(...data)\n        },\n        setSubs(...data:Array<IHistoryItem>) {\n            self.historyOfSubsPriceChange.push(...data)\n        },\n    }))\n\n\nexport interface IHistoryItem extends Instance<typeof historyItem> {}\nexport interface IHistory extends Instance<typeof History> {}\nexport default History\n","// https://min-api.cryptocompare.com/data/v2/news/?categories=RUB\n\nimport axios from \"axios\";\nimport { Instance, types, flow, getRoot, cast } from \"mobx-state-tree\";\nimport { IStore } from \"./index\";\nimport { reaction } from \"mobx\";\n\nconst NewsItem = types.model(\"NewsItem\", {\n    id: types.string,\n    published: types.number,\n    guid: types.string,\n    imageurl: types.string,\n    title: types.string,\n    url: types.string,\n    source: types.string,\n    body: types.string,\n    tags: types.string,\n    categories: types.string,\n    upvotes: types.string,\n    downvotes: types.string,\n    lang: types.string,\n})\n\nconst News = types.model(\"News\", {\n    newsData: types.optional(types.array(NewsItem), []),\n})\n    .views(self => ({\n        get root(): IStore {\n            return getRoot<IStore>(self)\n        },\n        get subscribedCurrency(): string {\n            return this.root.streamer.subscribedCurrency.name\n        },\n    }))\n    .actions(self => ({\n        fetchData: flow(function* () {\n            self.newsData.clear();\n            const { data: { Data, }, } = yield axios.get(\"https://min-api.cryptocompare.com/data/v2/news/?categories=\" + self.subscribedCurrency);\n            self.newsData = Data.map((_data: any) => ({\n                ..._data,\n                published: _data.published_on,\n            }))\n        }),\n        afterCreate() {\n            this.fetchData()\n\n            reaction(() => self.subscribedCurrency, () => {\n                this.fetchData()\n            })\n        },\n    }))\n\nexport default News\nexport interface INews extends Instance<typeof News> {}\nexport interface INewsItem extends Instance<typeof NewsItem> {}\n","import { types } from \"mobx-state-tree\";\n\nconst ChartParams = types.model(\"ChartParams\", {\n    activeCryptoSelect: -1,\n})\n    .actions((self) => ({\n        setActiveCryptoSelect(activeCryptoSelect: number) {\n            self.activeCryptoSelect = activeCryptoSelect;\n        },\n    }))\nexport default ChartParams\n","import Streamer from \"./Streamer\";\nimport History from \"./History\";\nimport { Instance, types } from \"mobx-state-tree\";\nimport News from \"./News\";\nimport ChartParams from \"./ChartParams\";\n\nconst Store = types.model(\"Store\", {\n    streamer: types.optional(Streamer, {}),\n    history: types.optional(History, {}),\n    news: types.optional(News, {}),\n    chartParams: types.optional(ChartParams, {}),\n})\n\nexport interface IStore extends Instance<typeof Store> {}\n\nexport default Store.create()\n\n","import React, { FC } from \"react\";\nimport { inject, observer } from \"mobx-react\";\nimport store from \"../store\";\n\n//get all names of models on top level of store\nconst stores = Object.keys({ ...store, })\n\nexport const withStore = (Component: FC<any>) => (\n    inject(...stores)(observer(Component))\n)\n","import currencyColors from \"../global/currencyColors.json\";\nimport { ECurrency } from \"../global/types\";\n\nexport default function (curr: ECurrency) {\n    return currencyColors[curr] || currencyColors.DEFAULT\n}\n","import React, { FC, useMemo } from \"react\";\nimport CurrencyNameWithDot from \"./CurrencyNameWithDot\";\nimport { withStore } from \"../../../hoc/withStore\";\nimport { IStore } from \"../../../store\";\nimport cs from \"classnames\"\nimport { ECurrency } from \"../../../global/types\";\nimport chunk from \"lodash/chunk.js\"\nimport { getSnapshot } from \"mobx-state-tree\";\n\nexport interface ISettingsProps {\n    data: ECurrency[],\n    isActive?: boolean,\n    cb: (name: ECurrency) => void\n    id: number\n}\n\nconst CurrencyList: FC<IStore & ISettingsProps> = ({\n    data,\n    cb,\n    isActive,\n    streamer: {\n        subscribedCurrency,\n        subscribedCurrencyBase,\n    },\n    chartParams: { setActiveCryptoSelect, activeCryptoSelect, },\n    id,\n}) => {\n    const cName = subscribedCurrency.name\n    const cBase = subscribedCurrencyBase.name\n\n    const list: typeof data[] = useMemo(() => (\n        data?.length ? (\n            chunk(data.filter(c => c !== cName && c !== cBase), 3)\n        ) : []\n    ), [cName, cBase])\n\n    function onClick(currencyName: ECurrency) {\n        return () => {\n            if (activeCryptoSelect !== id) {\n                setActiveCryptoSelect(id)\n            }\n            else {\n                cb(currencyName)\n            }\n        }\n    }\n\n    return (list.length ?\n        <div className={cs(\"currency-list\", { active: isActive, })} style={{ zIndex: activeCryptoSelect === id ? 10000 : 1000 - id, }}>\n            <div className=\"currency-list-before\"/>\n            {\n                list.map((sublist: ECurrency[]) => (\n                    <div className={\"currency-list-inner\"}>\n                        {sublist.map((currencyName: ECurrency, i) => (\n                            <CurrencyNameWithDot\n                                key={i}\n                                name={currencyName}\n                                onClick={onClick(currencyName)}\n                            />\n                        ))}\n                    </div>\n                ))\n            }\n        </div> : <></>\n    )\n}\n\nexport default withStore(CurrencyList);\n","import React, { FC, useCallback, useMemo, useState } from \"react\";\nimport { ECurrency } from \"../../../global/types\";\nimport { withStore } from \"../../../hoc/withStore\";\nimport getColorByCurrency from \"../../../utils/getColorByCurrency\";\nimport CurrencySettings, { ISettingsProps } from \"./CurrencyList\";\nimport { IStore } from \"../../../store\";\nimport cs from \"classnames\"\n\ninterface IProps {\n    name: ECurrency,\n    onClick?: () => void,\n    data: ECurrency[];\n    id: number;\n    activeSelectId?: number;\n    setActiveSelectId?: React.Dispatch<React.SetStateAction<number>>\n}\n\nconst CurrencyNameWithDot:FC<ISettingsProps & IProps & IStore> =\n({\n    name,\n    cb,\n    data,\n    id,\n    chartParams: { setActiveCryptoSelect, activeCryptoSelect, },\n    ...props\n}) => {\n    const CColor = useMemo(() => getColorByCurrency(name), [name])\n    const [touched, touch] = useState(false);\n\n    const setActive = useCallback(() => {\n        if (setActiveCryptoSelect && activeCryptoSelect === -1) {\n            setActiveCryptoSelect(id)\n        }\n    }, [setActiveCryptoSelect])\n\n    const setInactive = useCallback(() => {\n        setActiveCryptoSelect && setActiveCryptoSelect(-1)\n    }, [setActiveCryptoSelect])\n\n    return (\n        <div\n            className={\"currency\"}\n            onClick={() => {\n                touch(true);\n                setActive()\n            }}\n            {...props}\n        >\n            <div className={cs(\"dot\", { untouched: !touched && id, })} style={{\n                background: CColor,\n                boxShadow: \"0 0 7px \" + CColor,\n            }}/>\n            <p>{name}</p>\n\n            <CurrencySettings {...{ cb, data, setActive, setInactive, id, }} isActive={activeCryptoSelect === id} />\n        </div>\n    );\n};\n\nexport default withStore(CurrencyNameWithDot);\n","import React, { FC, useEffect, useState } from \"react\";\nimport cs from \"classnames\";\nimport { withStore } from \"../../../hoc/withStore\";\nimport { IStore } from \"../../../store\";\n\nconst CurrentStreamValue: FC<IStore> = ({\n    streamer: {\n        subscribedCurrency: {\n            streamValue,\n        },\n    },\n}) => {\n    const [prevStreamValue, setPrevStreamValue] = useState(0)\n    const [priceClass, setPriceClass] = useState(\"\")\n\n    useEffect(() => {\n        if (streamValue >= prevStreamValue) {\n            setPriceClass(\"green\")\n        }\n        else {\n            setPriceClass(\"red\")\n        }\n\n        setPrevStreamValue(streamValue)\n\n    }, [streamValue])\n\n\n    return (\n        <>\n            {\n                !!streamValue && <p\n                    className={\"price-lighten\"}\n                >\n                current price:&nbsp;\n                    <span\n                        onAnimationEnd={() => setPriceClass(\"\")}\n                        className={cs(\"price-lighten\", priceClass)}\n                    >\n                        {streamValue}\n                    </span>\n                </p>\n            }\n        </>\n    );\n};\n\nexport default withStore(CurrentStreamValue)\n","import React, { FC } from \"react\";\nimport { withStore } from \"../../../hoc/withStore\";\nimport { IStore } from \"../../../store\";\nimport cs from \"classnames\";\nimport { PRICE, VOLUME } from \"../../../global/consts\";\n\nconst StreamBaseSwitch: FC<IStore> = ({\n    streamer: {\n        // streamBy,\n        // setStreamBy,\n        chartType,\n        setChartType,\n    },\n}) => {\n    function volActive() {\n        // setStreamBy(VOLUME)\n        setChartType(\"line\")\n    }\n    function priceActive() {\n        // setStreamBy(PRICE)\n        setChartType(\"bar\")\n    }\n\n    return (\n        <div className={\"switch\"}>\n            <div onClick={volActive} className={cs({ active: chartType === \"line\", })}>\n                Line\n            </div>\n            <div onClick={priceActive} className={cs({ active: chartType === \"bar\", })}>\n                Bar\n            </div>\n        </div>\n    );\n};\n\nexport default withStore(StreamBaseSwitch);\n","import React, { FC, useState } from \"react\";\nimport { withStore } from \"../../../hoc/withStore\";\nimport { IStore } from \"../../../store\";\nimport CurrencyNameWithDot from \"./CurrencyNameWithDot\";\nimport CurrentPrice from \"./CurrentStreamValue\";\nimport StreamBaseSwitch from \"./StreamBaseSwitch\";\n\nconst ChartParams: FC<IStore> = ({\n    streamer: {\n        subscribedCurrency,\n        streamBySimpleCurrency,\n        streamByCryptoCurrency,\n        subscribedCurrencyBase,\n    },\n}) => {\n    const [activeSelectId, setActiveSelectId] = useState(-1)\n    return (\n        <div className=\"currency main\">\n            <CurrencyNameWithDot\n                {...{ activeSelectId, setActiveSelectId, }}\n                id={1}\n                name={subscribedCurrency.name}\n                data={[\"BTC\", \"ETH\", \"XRP\", \"LTC\", \"USDT\", \"BNB\", \"BUSD\", \"EOS\", \"ADA\"]}\n                cb={streamByCryptoCurrency}\n            />\n\n            <CurrencyNameWithDot\n                {...{ activeSelectId, setActiveSelectId, }}\n                id={2}\n                name={subscribedCurrencyBase.name}\n                data={[\"USD\", \"EUR\", \"JPY\", \"RUB\"]}\n                cb={streamBySimpleCurrency}\n            />\n\n            <StreamBaseSwitch/>\n\n            <CurrentPrice/>\n\n        </div>\n    );\n};\n\nexport default withStore(ChartParams)\n","export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React, { FC } from \"react\";\nimport logo from \"../logo.svg\";\n\nconst Loader: FC = () => {\n    return (\n        <div className={\"nullChart\"}>\n            <span>The data will appear here</span>\n            <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        </div>\n    );\n};\n\nexport default Loader;\n","import React, { FC } from \"react\";\nimport { getSnapshot } from \"mobx-state-tree\";\nimport { Area, AreaChart, Bar, BarChart, CartesianGrid, Cell, ComposedChart, Tooltip, XAxis, YAxis } from \"recharts\";\nimport { withStore } from \"../../hoc/withStore\";\nimport { IStore } from \"../../store\";\nimport getColorByCurrency from \"../../utils/getColorByCurrency\";\nimport { ECurrency } from \"../../global/types\";\nimport Loader from \"../Loader\";\n\nexport const MainLineChart:FC<IStore> = withStore(({\n    streamer: {\n        subscribedCurrency,\n        subscribedCurrencyBase,\n        streamBy,\n    },\n    history: {\n        historyOfSubsPriceChange,\n    },\n}) => {\n\n    const tick = {\n        fontSize: 11,\n    }\n\n    const fromColor = getColorByCurrency(subscribedCurrency.name as ECurrency)\n    const toColor = getColorByCurrency(subscribedCurrencyBase.name as ECurrency)\n\n    const data = getSnapshot(historyOfSubsPriceChange) as any\n    const isDataNull = data.length < 2\n\n\n    return (\n        <>\n            {isDataNull && <Loader/>}\n            <AreaChart\n                width={window.innerWidth - 100}\n                height={400}\n                data={isDataNull ? [] : data}\n            >\n                <defs>\n                    <linearGradient id=\"colorUv\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n                        <stop offset=\"5%\" stopColor={fromColor} stopOpacity={0.8}/>\n                        <stop offset=\"95%\" stopColor={toColor} stopOpacity={0.1}/>\n                    </linearGradient>\n                </defs>\n                <CartesianGrid strokeDasharray=\"3\" />\n                <XAxis dataKey=\"time\" { ...{ tick, }} />\n                <YAxis orientation={\"right\"} allowDataOverflow domain={[\"dataMin\", \"dataMax\"]} { ...{ tick, }} />\n                <Tooltip />\n\n                <Area\n                    type=\"monotone\"\n                    name={streamBy}\n                    dataKey={\"streamValue\"}\n                    stroke={fromColor}\n                    fillOpacity={1}\n                    fill=\"url(#colorUv)\"\n                    // scale={2}\n                />\n            </AreaChart>\n        </>\n    );\n});\n\nexport const MainChartBar:FC<IStore> = withStore(({\n    streamer: {\n        subscribedCurrency,\n        subscribedCurrencyBase,\n        streamBy,\n    },\n    history: {\n        historyOfSubsPriceChange,\n    },\n}) => {\n\n    const tick = {\n        fontSize: 11,\n    }\n\n    const fromColor = getColorByCurrency(subscribedCurrency.name as ECurrency)\n    const toColor = getColorByCurrency(subscribedCurrencyBase.name as ECurrency)\n\n    const data = getSnapshot(historyOfSubsPriceChange) as any[]\n    const isDataNull = data.length < 2\n\n    const dataMin: number = Math.min(...data.map(entry => entry.streamValue))\n    const dataMax: number = Math.max(...data.map(entry => entry.streamValue))\n\n\n    return (\n        <>\n            {isDataNull && <Loader/>}\n            <BarChart\n                width={window.innerWidth - 100}\n                height={400}\n                data={isDataNull ? [] : data}\n            >\n                <defs>\n                    <linearGradient id=\"colorUv\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n                        <stop offset=\"5%\" stopColor={fromColor} stopOpacity={0.8}/>\n                        <stop offset=\"95%\" stopColor={toColor} stopOpacity={0.1}/>\n                    </linearGradient>\n                </defs>\n                <CartesianGrid strokeDasharray=\"3\" />\n                <XAxis dataKey=\"time\" { ...{ tick, }} />\n                <YAxis orientation={\"right\"} allowDataOverflow domain={[\"dataMin\", \"dataMax\"]} { ...{ tick, }} />\n                <Tooltip />\n\n                {/*<Area*/}\n                {/*    type=\"monotone\"*/}\n                {/*    name={streamBy}*/}\n                {/*    dataKey={\"streamValue\"}*/}\n                {/*    stroke={fromColor}*/}\n                {/*    fillOpacity={1}*/}\n                {/*    fill=\"url(#colorUv)\"*/}\n                {/*    // scale={2}*/}\n                {/*/>*/}\n\n                <Bar type=\"monotone\" name={streamBy} dataKey=\"streamValue\">\n                    {data.map((entry, index) => (\n                        <Cell fill={data[index - 1]?.streamValue > entry.streamValue ? \"red\" : \"green\"} />\n                    ))}\n                </Bar>\n            </BarChart>\n        </>\n    );\n});\n","import React from \"react\";\nimport { withStore } from \"../hoc/withStore\";\nimport { IStore } from \"../store\";\n\nconst BuyButton: React.FC<IStore> = ({ streamer: { subscribedCurrency, subscribedCurrencyBase, }, }) => {\n    const link = `https://www.binance.com/en/buy-sell-crypto?fiat=${subscribedCurrencyBase.name}&crypto=${subscribedCurrency.name}`;\n    return (\n        <div className={\"buy-buttons\"}>\n            <a target=\"_blank\" className={\"buy-button\"} href={link}>BUY</a>\n            <a target=\"_blank\" className={\"buy-button\"} href={link + \"&type=SELL\"}>SELL</a>\n        </div>\n    );\n};\n\nexport default withStore(BuyButton);\n","import React from \"react\";\nimport { withStore } from \"../../hoc/withStore\";\nimport { INewsItem } from \"../../store/News\";\nimport { IStore } from \"../../store\";\nimport getColorByCurrency from \"../../utils/getColorByCurrency\";\nimport { ECurrency } from \"../../global/types\";\nimport dayjs from \"dayjs\"\nimport relativeTime from \"dayjs/plugin/relativeTime\";\n\ndayjs.extend(relativeTime)\n\nconst NewsItem: React.FC<INewsItem & IStore> = ({ title, imageurl, body, url, categories, published, streamer: { subscribedCurrency, }, }) => {\n    return (\n        <a href={url} target=\"_blank\" className={\"news-item\"}>\n            <img className={\"news-item__image\"} src={imageurl}/>\n            <div>\n                <p className={\"news-item__title\"}>{title} <span className={\"news-item__date\"}>{dayjs(published * 1000).fromNow()}</span></p>\n                <p className={\"news-item__body\"}>{body}</p>\n                <p className={\"news-item__body\"}>Categories: {categories.split(\"|\").map(category => (\n                    <span className={\"news-item__tag\"} style={subscribedCurrency.name === category ? { color: getColorByCurrency(subscribedCurrency.name as ECurrency), borderColor: getColorByCurrency(subscribedCurrency.name as ECurrency), } : {}}>{category}</span>\n                ))}</p>\n            </div>\n        </a>\n    );\n};\n\nexport default withStore(NewsItem);\n","import React from \"react\";\nimport { withStore } from \"../../hoc/withStore\";\nimport { IStore } from \"../../store\";\nimport NewsItem from \"./NewsItem\";\n\nconst News: React.FC<IStore> = ({ news: { newsData, }, }) => {\n    return (\n        <div className={\"news\"}>\n            {newsData.map(newsItem => (\n                <NewsItem {...newsItem}></NewsItem>\n            ))}\n        </div>\n    );\n};\n\nexport default withStore(News);\n","import React, { FC } from \"react\";\nimport ChartParams from \"./Chart/Params/ChartParams\";\nimport { MainLineChart, MainChartBar } from \"./Chart/MainChart\";\nimport BuyButton from \"./BuyButton\";\nimport { withStore } from \"../hoc/withStore\";\nimport { IStore } from \"../store\";\nimport News from \"./News\";\n\nconst AppBody: FC<IStore> = ({ streamer: { chartType, }, }) => {\n    return (\n        <>\n            <ChartParams/>\n            {/*@ts-ignore*/}\n            {chartType === \"line\" ? <MainLineChart/> : <MainChartBar/>}\n            <BuyButton></BuyButton>\n            <News/>\n        </>\n    );\n};\n\nexport default withStore(AppBody);\n","import \"../scss/App.scss\";\nimport React, { FC } from \"react\";\nimport AppBody from \"./AppBody\";\n// import { BrowserRouter, Link, Route, Routes } from \"react-router-dom\";\n// import News from \"./News\";\nimport { withStore } from \"../hoc/withStore\";\nimport { IStore } from \"../store\";\n\nconst App:FC<IStore> = ({ chartParams: { setActiveCryptoSelect, activeCryptoSelect, }, }) => {\n    return (\n        <div className=\"App\">\n            <div className=\"App-body\" onClick={() => activeCryptoSelect !== -1 && setActiveCryptoSelect(-1)}>\n                <AppBody/>\n                {/*<BrowserRouter>*/}\n                {/*<Link to={\"/\"} title={\"chart\"} />*/}\n                {/*<Link to={\"/news\"} title={\"news\"} />*/}\n                {/*<Routes>*/}\n                {/*    <Route path=\"/\" element={<AppBody/>} />*/}\n                {/*    <Route path=\"/news\" element={<News/>} />*/}\n                {/*</Routes>*/}\n                {/*</BrowserRouter>*/}\n            </div>\n        </div>\n    );\n}\n\nexport default withStore(App);\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./scss/index.scss\";\nimport App from \"../src/components/App\";\nimport store from \"./store\";\nimport { Provider } from \"mobx-react\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider {...store}>\n            <App />\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n"],"sourceRoot":""}